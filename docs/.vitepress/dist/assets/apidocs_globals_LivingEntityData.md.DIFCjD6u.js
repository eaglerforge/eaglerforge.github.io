import{_ as e,c as o,o as i,V as d}from"./chunks/framework.gkMttBBc.js";const p=JSON.parse('{"title":"LivingEntityData","description":"","frontmatter":{},"headers":[],"relativePath":"apidocs/globals/LivingEntityData.md","filePath":"apidocs/globals/LivingEntityData.md"}'),l={name:"apidocs/globals/LivingEntityData.md"},t=d('<h1 id="livingentitydata" tabindex="-1">LivingEntityData <a class="header-anchor" href="#livingentitydata" aria-label="Permalink to &quot;LivingEntityData&quot;">â€‹</a></h1><p>A LivingEntityData usually has all of the properties of <a href="./EntityData.html">EntityData</a>, and:</p><ul><li><code>isSwingInProgress: Boolean</code></li><li><code>arrowHitTimer: Integer</code></li><li><code>hurtTime: Integer</code></li><li><code>maxHurtTime: Integer</code></li><li><code>swingProgressInt: Integer</code></li><li><code>attackedAtYaw: Number</code></li><li><code>deathTime: Integer</code></li><li><code>prevSwingProgress: Number</code></li><li><code>swingProgress: Number</code></li><li><code>prevLimbSwingAmount: Number</code></li><li><code>limbSwingAmount: Number</code></li><li><code>limbSwing: Number</code></li><li><code>maxHurtResistantTime: Integer</code></li><li><code>prevCameraPitch: Number</code></li><li><code>cameraPitch: Number</code></li><li><code>renderYawOffset: Number</code></li><li><code>prevRenderYawOffset: Number</code></li><li><code>rotationYawHead: Number</code></li><li><code>prevRotationYawHead: Number</code></li><li><code>jumpMovementFactor: Number</code></li><li><code>recentlyHit: Integer</code></li><li><code>dead: Boolean</code></li><li><code>entityAge: Integer</code></li><li><code>onGroundSpeedFactor: Number</code></li><li><code>prevOnGroundSpeedFactor: Number</code></li><li><code>movedDistance: Number</code></li><li><code>prevMovedDistance: Number</code></li><li><code>scoreValue: Integer</code></li><li><code>movedDistance: Number</code></li><li><code>isJumping: Boolean</code></li><li><code>moveForward: Number</code></li><li><code>moveStrafing: Number</code></li><li><code>randomYawVelocity: Number</code></li><li><code>newPosRotationIncrements: Integer</code></li><li><code>newPosX: Number</code></li><li><code>newPosY: Number</code></li><li><code>newPosZ: Number</code></li><li><code>newRotationPitch: Number</code></li><li><code>newRotationYaw: Number</code></li><li><code>revengeTimer: Integer</code></li><li><code>lastAttackerTime: Integer</code></li><li><code>landMovementFactor: Number</code></li><li><code>jumpTicks: Integer</code></li><li><code>absorptionAmount: Number</code></li></ul><p>It has the following methods:</p><ul><li><code>getPreviousEquipment() : ItemStackData[]</code></li><li><code>getAttackingPlayer() : PlayerData</code></li><li><code>getLastAttacker() : LivingEntityData</code></li><li><code>getEntityLivingToAttack() : LivingEntityData</code></li><li><code>setEntityLivingToAttack({entity: EntityRef}) : void</code></li><li><code>canBreatheUnderwater() : Boolean</code></li><li><code>isChild() : Boolean</code></li><li><code>canDropLoot() : Boolean</code></li><li><code>decreaseAirSupply({parInt1: Integer}) : Integer</code></li><li><code>isPlayer() : Boolean</code></li><li><code>getAITarget() : LivingEntityData</code></li><li><code>getRevengeTimer() : Integer</code></li><li><code>getLastAttackerTime() : Integer</code></li><li><code>getAge() : Integer</code></li><li><code>clearActivePotions() : void</code></li><li><code>isPotionActive({potionId: Integer}) : Boolean</code></li><li><code>isEntityUndead() : Boolean</code></li><li><code>removePotionEffectClient({potionId: Integer}) : void</code></li><li><code>removePotionEffect({potionId: Integer}) : void</code></li><li><code>heal({f: Number}) : void</code></li><li><code>getHealth() : Number</code></li><li><code>setHealth({health: Number}) : void</code></li><li><code>getHurtSound() : String</code></li><li><code>getDeathSound() : String</code></li><li><code>addRandomDrop() : void</code></li><li><code>isOnLadder() : Boolean</code></li><li><code>isEntityAlive() : Boolean</code></li><li><code>fall({f: Number, f1: Number}) : void</code></li><li><code>getFallSoundString({damageValue: Integer}) : String</code></li><li><code>performHurtAnimation() : void</code></li><li><code>getTotalArmorValue() : Integer</code></li><li><code>damageArmor({parFloat1: Number}) : void</code></li><li><code>getMaxHealth() : Number</code></li><li><code>getArrowCountInEntity() : Integer</code></li><li><code>setArrowCountInEntity({count: Integer}) : void</code></li><li><code>swingItem() : void</code></li><li><code>kill() : void</code></li><li><code>setSprinting({flag: Boolean}) : void</code></li><li><code>getSoundVolume() : Number</code></li><li><code>getSoundPitch() : Number</code></li><li><code>isMovementBlocked() : Boolean</code></li><li><code>getJumpUpwardsMotion() : Number</code></li><li><code>jump() : void</code></li><li><code>updateAITick() : void</code></li><li><code>handleJumpLava() : void</code></li><li><code>getAIMoveSpeed() : Number</code></li><li><code>setAIMoveSpeed({speedIn: Number}) : void</code></li><li><code>collideWithNearbyEntities() : void</code></li><li><code>setJumping({parFlag: Boolean}) : void</code></li><li><code>canBeCollidedWith() : Boolean</code></li><li><code>canBePushed() : Boolean</code></li><li><code>setBeenAttacked() : void</code></li><li><code>getRotationYawHead() : Number</code></li><li><code>setRotationYawHead({f: Number}) : void</code></li><li><code>getAbsorptionAmount() : Number</code></li><li><code>setAbsorptionAmount({amount: Number}) : void</code></li><li><code>markPotionsDirty() : void</code></li></ul>',5),c=[t];function n(a,r,m,g,u,s){return i(),o("div",null,c)}const b=e(l,[["render",n]]);export{p as __pageData,b as default};

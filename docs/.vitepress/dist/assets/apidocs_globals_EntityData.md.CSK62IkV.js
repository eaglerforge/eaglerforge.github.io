import{_ as e,c as o,o as i,V as d}from"./chunks/framework.gkMttBBc.js";const y=JSON.parse('{"title":"EntityData","description":"","frontmatter":{},"headers":[],"relativePath":"apidocs/globals/EntityData.md","filePath":"apidocs/globals/EntityData.md"}'),t={name:"apidocs/globals/EntityData.md"},l=d('<h1 id="entitydata" tabindex="-1">EntityData <a class="header-anchor" href="#entitydata" aria-label="Permalink to &quot;EntityData&quot;">â€‹</a></h1><p>A typical EntityData object will have the following properties:</p><ul><li><code>x</code>: Number: Equal to the entity&#39;s <code>posX</code>.</li><li><code>y</code>: Number: Equal to the entity&#39;s <code>posY</code>.</li><li><code>z</code>: Number: Equal to the entity&#39;s <code>posZ</code>.</li><li><code>chunkCoordX</code>: Number: Equal to the entity&#39;s <code>chunkCoordX</code>. (Read-only)</li><li><code>chunkCoordY</code>: Number: Equal to the entity&#39;s <code>chunkCoordY</code>. (Read-only)</li><li><code>chunkCoordZ</code>: Number: Equal to the entity&#39;s <code>chunkCoordZ</code>. (Read-only)</li><li><code>motionX</code>: Number: Equal to the entity&#39;s <code>motionX</code>.</li><li><code>motionY</code>: Number: Equal to the entity&#39;s <code>motionY</code>.</li><li><code>motionZ</code>: Number: Equal to the entity&#39;s <code>motionZ</code>.</li><li><code>yaw</code>: Number: Equal to the entity&#39;s <code>rotationYaw</code>.</li><li><code>pitch</code>: Number: Equal to the entity&#39;s <code>rotationPitch</code>.</li><li><code>isInWeb</code>: Boolean: Equal to the entity&#39;s <code>isInWeb</code>.</li><li><code>isCollided</code>: Boolean: Equal to the entity&#39;s <code>isCollided</code>.</li><li><code>isCollidedVertically</code>: Boolean: Equal to the entity&#39;s <code>isCollidedVertically</code>.</li><li><code>isCollidedHorizontally</code>: Boolean: Equal to the entity&#39;s <code>isCollidedHorizontally</code>.</li><li><code>onGround</code>: Boolean: Equal to the entity&#39;s <code>onGround</code>.</li><li><code>dimension</code>: Integer: Equal to the entity&#39;s <code>dimension</code>. (Read-only)</li><li><code>id</code>: Integer: Equal to the entity&#39;s <code>entityId</code>. (Read-only)</li><li><code>fallDistance</code>: Number: Equal to the entity&#39;s <code>fallDistance</code>. (Read-only)</li><li><code>noClip</code>: Boolean: Equal to the entity&#39;s <code>noClip</code>.</li><li><code>stepHeight</code>: Number: Equal to the entity&#39;s <code>stepHeight</code>.</li><li><code>isDead</code>: Boolean: Equal to the entity&#39;s <code>isDead</code>. (Read-only)</li><li><code>inPortal</code>: Boolean: Equal to the entity&#39;s <code>inPortal</code>.</li><li><code>inWater</code>: Boolean: Equal to the entity&#39;s <code>inWater</code>.</li><li><code>isAirBorne</code>: Boolean: Equal to the entity&#39;s <code>isAirBorne</code>.</li><li><code>ticksExisted</code>: Integer: Equal to the entity&#39;s <code>ticksExisted</code>. (Read-only)</li><li><code>invulnerable</code>: Boolean: Equal to the entity&#39;s <code>invulnerable</code>.</li><li><code>isImmuneToFire</code>: Boolean: Equal to the entity&#39;s <code>isImmuneToFire</code>.</li><li><code>isOutsideBorder</code>: Boolean: Equal to the entity&#39;s <code>isOutsideBorder</code>.</li><li><code>entityCollisionReduction</code>: Number: Equal to the entity&#39;s <code>entityCollisionReduction</code>.</li></ul><p>It contains the following methods:</p><ul><li><code>isBurning() : boolean</code></li><li><code>isPushedByWater() : boolean</code></li><li><code>isEating() : boolean</code></li><li><code>isEntityAlive() : boolean</code></li><li><code>isEntityInsideOpaqueBlock() : boolean</code></li><li><code>isImmuneToExplosions() : boolean</code></li><li><code>isImmuneToFire() : boolean</code></li><li><code>isInLava() : boolean</code></li><li><code>isInRangeToRender3d({x: number, y: number: z: number}) : boolean</code></li><li><code>isInRangeToRenderDist({distance: number}) : boolean</code></li><li><code>isInWater() : boolean</code></li><li><code>isInvisible() : boolean</code></li><li><code>isPushedByWater() : boolean</code></li><li><code>isRiding() : boolean</code></li><li><code>isSilent() : boolean</code></li><li><code>isSneaking() : boolean</code></li><li><code>isSprinting() : boolean</code></li><li><code>isWet() : boolean</code></li><li><code>setAir({air: integer}) : void</code></li><li><code>setAlwaysRenderNameTag({alwaysRenderNameTag: boolean}) : void</code></li><li><code>setAngles({yaw: number, pitch: number}) : void</code></li><li><code>setBeenAttacked() : void</code></li><li><code>setCustomNameTag({name: string}) : void</code></li><li><code>setDead() : void</code></li><li><code>setEating({eating: boolean}) : void</code></li><li><code>setEntityId({id: integer}) : void</code></li><li><code>setFire({seconds: integer}) : void</code></li><li><code>setFlag({flag: integer, set: boolean}) : void</code></li><li><code>setInWeb() : void</code></li><li><code>setInvisible({invisible: boolean}) : void</code></li><li><code>setLocationAndAngles({x: number, y: number, z: number, yaw: number, pitch: number}) : void</code></li><li><code>setOnFireFromLava() : void</code></li><li><code>setOutsideBorder({outsideBorder: boolean}) : void</code></li><li><code>setPosition({x: number, y: number, z: number}) : void</code></li><li><code>setPositionAndRotation({x: number, y: number, z: number, yaw: number, pitch: number}) : void</code></li><li><code>setPositionAndRotation2({d0: number, d1: number, d2: number, f: number, f1: number, var9: integer, var10: boolean}) : void</code></li><li><code>setPositionAndUpdate({d0: number, d1: number, d2: number}) : void</code></li><li><code>setRotation({yaw: number, pitch: number}) : void</code></li><li><code>setRotationYawHead({rotation: number}) : void</code></li><li><code>setSilent({isSilent: boolean}) : void</code></li><li><code>setSize({f: number, f1: number}) : void</code></li><li><code>setSneaking({sneaking: boolean}) : void</code></li><li><code>setSprinting({flag: boolean}) : void</code></li><li><code>setVelocity({x: number, y: number, z: number}) : void</code></li><li><code>getUUID() : string</code></li><li><code>getAir() : integer</code></li><li><code>getAlwaysRenderNameTag() : boolean</code></li><li><code>getAlwaysRenderNameTagForRender() : boolean</code></li><li><code>getBrightness({var1: number}) : number</code></li><li><code>getBrightnessForRender({var1: number}) : integer</code></li><li><code>getCollisionBorderSize() : number</code></li><li><code>getCollisionBoundingBox() : [AxisAlignedBB](AxisAlignedBB.md)</code></li><li><code>getCommandSenderEntity() : [EntityData](EntityData.md)</code></li><li><code>getCustomNameTag() : string</code></li><li><code>getDisplayName() : string</code></li><li><code>getDisplayNameFormatted() : string</code></li><li><code>getDistance({x: number, y: number, z: number}) : number</code></li><li><code>getDistanceSq({x: number, y: number, z: number}) : number</code></li><li><code>getMountedYOffset() : number</code></li><li><code>getEntityId() : integer</code></li><li><code>getEntityString() : string</code></li><li><code>getEyeHeight() : number</code></li><li><code>getFlag({flag: integer}) : boolean</code></li><li><code>getMaxFallHeight() : integer</code></li><li><code>getMaxInPortalTime() : integer</code></li><li><code>getName() : string</code></li><li><code>getParts() : [Array&lt;EntityData&gt;](EntityData.md)</code></li><li><code>getPortalCooldown() : integer</code></li><li><code>getRotationYawHead() : number</code></li><li><code>getSplashSound() : string</code></li><li><code>getSwimSound() : string</code></li><li><code>getYOffset() : number</code></li><li><code>getClassName() : string</code></li><li><code>getPositionVector() : [Vec3](Vec3.md)</code></li><li><code>getPositionEyes({partialTicks: number}) : [Vec3](Vec3.md)</code></li><li><code>getLook({partialTicks: number}) : [Vec3](Vec3.md)</code></li><li><code>getLookVec() : [Vec3](Vec3.md)</code></li><li><code>getVectorForRotation({yaw: number, float: number}) : [Vec3](Vec3.md)</code></li><li><code>toNBT() : String</code></li><li><code>fromNBT({nbt: String}) : void</code></li></ul>',5),c=[l];function n(a,r,s,u,m,b){return i(),o("div",null,c)}const h=e(t,[["render",n]]);export{y as __pageData,h as default};

import{_ as e,c as a,o as t,V as n}from"./chunks/framework.gkMttBBc.js";const v=JSON.parse('{"title":"ModAPI.addEventListener(String eventName, Function callback)","description":"","frontmatter":{},"headers":[],"relativePath":"apidocs/events/addEventListener.md","filePath":"apidocs/events/addEventListener.md"}'),i={name:"apidocs/events/addEventListener.md"},l=n('<h1 id="modapi-addeventlistener-string-eventname-function-callback" tabindex="-1">ModAPI.addEventListener(String eventName, Function callback) <a class="header-anchor" href="#modapi-addeventlistener-string-eventname-function-callback" aria-label="Permalink to &quot;ModAPI.addEventListener(String eventName, Function callback)&quot;">​</a></h1><p>This method is used to add event listeners to the event name specified.</p><h2 id="arguments" tabindex="-1">Arguments: <a class="header-anchor" href="#arguments" aria-label="Permalink to &quot;Arguments:&quot;">​</a></h2><h3 id="string-eventname" tabindex="-1">(String) eventName <a class="header-anchor" href="#string-eventname" aria-label="Permalink to &quot;(String) eventName&quot;">​</a></h3><p>This argument is used to specify internally which listener array to add the callback to. It has the following valid values:</p><ul><li><p><code>event</code> Called when any event is called. Passes an object with properties:</p><ul><li><code>event</code>: String representing the type of event being fired.</li><li><code>data</code>: Object representing the original arguments to be passed to the callback.</li></ul></li><li><p><code>gui</code> Called when the Mod Manager GUI shows up. No arguments passed to callback.</p></li><li><p><code>load</code> Called when all mods have finished loading.</p></li><li><p><code>update</code> Called every client tick. No arguments passed to callback.</p></li></ul><h3 id="function-callback" tabindex="-1">(Function) Callback <a class="header-anchor" href="#function-callback" aria-label="Permalink to &quot;(Function) Callback&quot;">​</a></h3><p>The function to call when this event fires.</p>',8),o=[l];function d(s,c,r,h,p,u){return t(),a("div",null,o)}const g=e(i,[["render",d]]);export{v as __pageData,g as default};

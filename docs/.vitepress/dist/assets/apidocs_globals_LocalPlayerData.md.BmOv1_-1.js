import{_ as e,c as o,o as l,V as i}from"./chunks/framework.gkMttBBc.js";const P=JSON.parse('{"title":"LocalPlayerData","description":"","frontmatter":{},"headers":[],"relativePath":"apidocs/globals/LocalPlayerData.md","filePath":"apidocs/globals/LocalPlayerData.md"}'),a={name:"apidocs/globals/LocalPlayerData.md"},d=i('<h1 id="localplayerdata" tabindex="-1">LocalPlayerData <a class="header-anchor" href="#localplayerdata" aria-label="Permalink to &quot;LocalPlayerData&quot;">â€‹</a></h1><p>Represents the local player.</p><p>A LocalPlayerData usually has all of the properties of <a href="./PlayerData.html">PlayerData</a>, and:</p><ul><li><code>lastReportedPosX: Number</code></li><li><code>lastReportedPosY: Number</code></li><li><code>lastReportedPosZ: Number</code></li><li><code>lastReportedYaw: Number</code></li><li><code>lastReportedPitch: Number</code></li><li><code>serverSneakState: Boolean</code></li><li><code>serverSprintState: Boolean</code></li><li><code>positionUpdateTicks: Integer</code></li><li><code>hasValidHealth: Boolean</code></li><li><code>clientBrand: String</code></li><li><code>sprintToggleTimer: Integer</code></li><li><code>sprintingTicksLeft: Integer</code></li><li><code>renderArmYaw: Number</code></li><li><code>renderArmPitch: Number</code></li><li><code>prevRenderArmYaw: Number</code></li><li><code>prevRenderArmPitch: Number</code></li><li><code>horseJumpPower: Number</code></li><li><code>horseJumpPowerCounter: Integer</code></li></ul><p>It has these methods:</p><ul><li><code>mountEntity({entityIn: EntityRef}) : void</code></li><li><code>dropOneItem({dropAll: Boolean}) : EntityData</code></li><li><code>sendChatMessage({message: String}) : void</code></li><li><code>respawnPlayer() : void</code></li><li><code>closeScreen() : void</code></li><li><code>closeScreenAndDropStack() : void</code></li><li><code>setPlayerSPHealth({health: Number}) : void</code></li><li><code>isUser() : Boolean</code></li><li><code>sendHorseJump() : void</code></li><li><code>sendHorseInventory() : void</code></li><li><code>setClientBrand({brand: String}) : void</code></li><li><code>getClientBrand() : String</code></li><li><code>pushOutOfBlocks({x: Number, y: Number, z: Number}) : Boolean</code></li><li><code>isOpenBlockSpace(pos: BlockPos) : Boolean</code></li><li><code>setXPStats({currentXP: Number, maxXP: Integer, level: Integer}) : void</code></li><li><code>playSound({name: String, volume: Number, pitch: Number}) : void</code></li><li><code>isServerWorld() : Boolean</code></li><li><code>isRidingHorse() : Boolean</code></li><li><code>getHorseJumpPower() : Number</code></li><li><code>isCurrentViewEntity() : Boolean</code></li><li><code>isSpectator() : Boolean</code></li></ul>',6),c=[d];function r(t,n,s,p,m,u){return l(),o("div",null,c)}const _=e(a,[["render",r]]);export{P as __pageData,_ as default};

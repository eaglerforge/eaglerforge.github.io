import{_ as e,c as o,o as i,V as l}from"./chunks/framework.gkMttBBc.js";const y=JSON.parse('{"title":"PlayerData","description":"","frontmatter":{},"headers":[],"relativePath":"apidocs/globals/PlayerData.md","filePath":"apidocs/globals/PlayerData.md"}'),t={name:"apidocs/globals/PlayerData.md"},d=l('<h1 id="playerdata" tabindex="-1">PlayerData <a class="header-anchor" href="#playerdata" aria-label="Permalink to &quot;PlayerData&quot;">â€‹</a></h1><p>Represents a player.</p><p>A PlayerData usually has all of the properties of <a href="./LivingEntityData.html">LivingEntityData</a>, and:</p><ul><li><code>foodStats</code>: <a href="./FoodStatsData.html">FoodStatsData</a>: Equal to the player&#39;s <code>foodStats</code>.</li><li><code>cameraYaw</code>: Number: Equal to the player&#39;s <code>cameraYaw</code>.</li><li><code>chasingPosX</code>: Number: Equal to the player&#39;s <code>chasingPosX</code>.</li><li><code>chasingPosY</code>: Number: Equal to the player&#39;s <code>chasingPosY</code>.</li><li><code>chasingPosZ</code>: Number: Equal to the player&#39;s <code>chasingPosZ</code>.</li><li><code>experience</code>: Number: The player&#39;s experience number.</li><li><code>experienceLevel</code>: Integer: The player&#39;s experience level.</li><li><code>experienceTotal</code>: Integer: The player&#39;s experience total.</li><li><code>fishEntity</code>: <a href="./FishHookData.html">FishHookData</a>: The player&#39;s fishing bobber / hook. (If existing)</li><li><code>flyToggleTimer</code>: Integer: Equal to the player&#39;s <code>flyToggleTimer</code>.</li><li><code>hasReducedDebug</code>: Boolean: Equal to the player&#39;s <code>hasReducedDebug</code>.</li><li><code>itemInUseCount</code>: Integer: The count of the item that the player is currenly using. (Read-only)</li><li><code>itemInUse</code>: <a href="./ItemStackData.html">ItemStackData</a>: The itemstack the player is using. (If existing)</li><li><code>lastXPSound</code>: Integer: Equal to the player&#39;s <code>lastXPSound</code>.</li><li><code>sleepTimer</code>: Integer: Equal to the player&#39;s <code>sleepTimer</code>.</li><li><code>sleeping</code>: Boolean: Whether or not the player is sleeping.</li><li><code>spawnForced</code>: Boolean: Equal to the player&#39;s <code>spawnForced</code>.</li><li><code>speedInAir</code>: Number: Equal to the player&#39;s <code>speedInAir</code>.</li><li><code>speedOnGround</code>: Number: Equal to the player&#39;s <code>speedOnGround</code>.</li><li><code>xpCooldown</code>: Integer: Equal to the player&#39;s <code>xpCooldown</code>.</li><li><code>xpSeed</code>: Integer: Equal to the player&#39;s <code>xpSeed</code>.</li><li><code>inventoryContainer</code>: <a href="./ContainerData.html">ContainerData</a>: Equal to the player&#39;s <code>inventoryContainer</code>.</li><li><code>openContainer</code>: <a href="./ContainerData.html">ContainerData</a>: Equal to the player&#39;s <code>openContainer</code>.</li><li><code>inventory</code>: <a href="./InventoryPlayerData.html">InventoryPlayerData</a>: Equals to the player&#39;s <code>inventory</code>.</li><li><code>capabilities</code>: <a href="./PlayerCapabilities.html">PlayerCapabilities</a>: Equals to the player&#39;s <code>capabilities</code>.</li></ul><p>It has the following methods:</p><ul><li><code>getItemInUse() : ItemStackData</code></li><li><code>getItemInUseCount() : Integer</code></li><li><code>isUsingItem() : Boolean</code></li><li><code>getItemInUseDuration() : Integer</code></li><li><code>stopUsingItem() : void</code></li><li><code>clearItemInUse() : void</code></li><li><code>isBlocking() : Boolean</code></li><li><code>getMaxInPortalTime() : Integer</code></li><li><code>getSwimSound() : String</code></li><li><code>getSplashSound() : String</code></li><li><code>getPortalCooldown() : Integer</code></li><li><code>playSound({s: String, f: Number, f1: Number}) : void</code></li><li><code>updateItemUse({itemStackIn: ItemStackData, parInt1: Integer}) : void</code></li><li><code>onItemUseFinish() : void</code></li><li><code>handleStatusUpdate({b0: Byte}) : void</code></li><li><code>isMovementBlocked() : Boolean</code></li><li><code>closeScreen() : void</code></li><li><code>updateRidden() : void</code></li><li><code>preparePlayerToSpawn() : void</code></li><li><code>updateEntityActionState() : void</code></li><li><code>onLivingUpdate() : void</code></li><li><code>collideWithPlayer({parEntity: EntityData}) : void</code></li><li><code>getScore() : Integer</code></li><li><code>addScore({parInt1: Integer}) : void</code></li><li><code>getHurtSound() : String</code></li><li><code>getDeathSound() : String</code></li><li><code>addToPlayerScore({entity: EntityData, i: Integer}) : void</code></li><li><code>dropOneItem({flag: Boolean}) : ItemEntityData</code></li><li><code>dropPlayerItemWithRandomChoice({itemStackIn: ItemStackData}) : ItemEntityData</code></li><li><code>dropItem({droppedItem: ItemStackData, dropAround: Boolean, traceItem: Boolean}) : ItemEntityData</code></li><li><code>joinEntityItemWithWorld({entityitem: ItemEntityData}) : void</code></li><li><code>getToolDigEfficiency({parBlock: BlockData}) : Number</code></li><li><code>canHarvestBlock({blockToHarvest: BlockData}) : Boolean</code></li><li><code>canAttackPlayer({entityplayer: PlayerData}) : Boolean</code></li><li><code>damageArmor({f: Number}) : void</code></li><li><code>getTotalArmorValue() : Integer</code></li><li><code>getArmorVisibility() : Number</code></li><li><code>interactWith({parEntity: EntityData}) : Boolean</code></li><li><code>getCurrentEquippedItem() : ItemStackData</code></li><li><code>destroyCurrentEquippedItem() : void</code></li><li><code>getYOffset() : Number</code></li><li><code>attackTargetEntityWithCurrentItem({entity: EntityData}) : void</code></li><li><code>respawnPlayer() : void</code></li><li><code>isEntityInsideOpaqueBlock() : Boolean</code></li><li><code>isUser() : Boolean</code></li><li><code>trySleep({blockpos: BlockPos}) : String</code></li><li><code>wakeUpPlayer({flag: Boolean, flag1: Boolean, flag2: Boolean}) : void</code></li><li><code>isInBed() : Boolean</code></li><li><code>getBedOrientationInDegrees() : Number</code></li><li><code>isPlayerSleeping() : Boolean</code></li><li><code>isPlayerFullyAsleep() : Boolean</code></li><li><code>getSleepTimer() : Integer</code></li><li><code>getBedLocation() : BlockPos</code></li><li><code>isSpawnForced() : Boolean</code></li><li><code>setSpawnPoint({pos: BlockPos, forced: Boolean}) : void</code></li><li><code>moveEntityWithHeading({f: Number, f1: Number}) : void</code></li><li><code>getAIMoveSpeed() : Number</code></li><li><code>addMovementStat({parDouble1: Number, parDouble2: Number, parDouble3: Number}) : void</code></li><li><code>addMountedMovementStat({parDouble1: Number, parDouble2: Number, parDouble3: Number}) : void</code></li><li><code>fall({f: Number, f1: Number}) : void</code></li><li><code>resetHeight() : void</code></li><li><code>getFallSoundString({i: Integer}) : String</code></li><li><code>setInWeb() : void</code></li><li><code>getCurrentArmor({i: Integer}) : ItemStackData</code></li><li><code>addExperience({amount: Integer}) : void</code></li><li><code>getXPSeed() : Integer</code></li><li><code>removeExperienceLevel({i: Integer}) : void</code></li><li><code>addExperienceLevel({i: Integer}) : void</code></li><li><code>xpBarCap() : Integer</code></li><li><code>addExhaustion({parFloat1: Number}) : void</code></li><li><code>getFoodStats() : FoodStatsData</code></li><li><code>canEat({ignoreHunger: Boolean}) : Boolean</code></li><li><code>shouldHeal() : Boolean</code></li><li><code>setItemInUse({itemstack: ItemStackData, i: Integer}) : void</code></li><li><code>isAllowEdit() : Boolean</code></li><li><code>canPlayerEdit({parBlockPos: BlockPos, parEnumFacing: String, parItemStack: ItemStackData}) : Boolean</code><ul><li><code>parEnumFacing</code> can be one of <code>UP</code>, <code>DOWN</code>, <code>NORTH</code>, <code>SOUTH</code>, <code>EAST</code> or <code>WEST</code></li></ul></li><li><code>isPlayer() : Boolean</code></li><li><code>getAlwaysRenderNameTagForRender() : Boolean</code></li><li><code>clonePlayer({entityplayer: PlayerData, flag: Boolean}) : void</code></li><li><code>canTriggerWalking() : Boolean</code></li><li><code>sendPlayerAbilities() : void</code></li><li><code>getName() : String</code></li><li><code>getEquipmentInSlot({i: Integer}) : ItemStackData</code></li><li><code>getHeldItem() : ItemStackData</code></li><li><code>setCurrentItemOrArmor({i: Integer, itemstack: ItemStackData}) : void</code></li><li><code>isInvisibleToPlayer({entityplayer: PlayerData}) : Boolean</code></li><li><code>getInventory() : ItemStackData[]</code></li><li><code>isPushedByWater() : Boolean</code></li><li><code>getEyeHeight() : Number</code></li><li><code>getOfflineUUID({username: String}) : String</code></li><li><code>replaceItemInInventory({i: Integer, itemstack: ItemStack}) : Boolean</code></li><li><code>hasReducedDebug() : Boolean</code></li><li><code>setReducedDebug({reducedDebug: Boolean}) : void</code></li></ul>',6),a=[d];function c(r,n,s,p,m,g){return i(),o("div",null,a)}const I=e(t,[["render",c]]);export{y as __pageData,I as default};

import{_ as e,c as l,o,V as t}from"./chunks/framework.gkMttBBc.js";const m=JSON.parse('{"title":"Mod API","description":"","frontmatter":{},"headers":[],"relativePath":"apidocs/index.md","filePath":"apidocs/index.md"}'),a={name:"apidocs/index.md"},i=t('<h1 id="mod-api" tabindex="-1">Mod API <a class="header-anchor" href="#mod-api" aria-label="Permalink to &quot;Mod API&quot;">​</a></h1><p>The Mod API consists of a global JavaScript object on the window, called, very simply, <code>ModAPI</code>.</p><p>It has the following properties:</p><ul><li><code>player: LocalPlayerData</code><ul><li>A <a href="./globals/LocalPlayerData.html"><code>LocalPlayerData</code></a> made from <code>EntityPlayerSP</code>. Regenerated every time the <code>update</code> event is called.</li></ul></li><li><code>settings: GameSettingsData</code><ul><li>A <a href="./globals/GameSettingsData.html"><code>GameSettingsData</code></a> made from <code>GameSettings</code>. Regenerated every time the <code>update</code> event is called.</li></ul></li><li><code>items: ItemData{}</code><ul><li>A <a href="./globals/ItemData.html"><code>ItemData</code></a> dictionary of all item types, and block-item types. [Auto]</li></ul></li><li><code>blocks: BlockData{}</code><ul><li>A <a href="./globals/BlockData.html"><code>BlockData</code></a> dictionary of all block types. [Auto]</li></ul></li><li><code>materials: MaterialData{}</code><ul><li>A <a href="./globals/MaterialData.html"><code>MaterialData</code></a> dictionary of all the block materials. [Auto]</li></ul></li><li><code>enchantments: EnchantmentData{}</code><ul><li>An <a href="./globals/EnchantmentData.html"><code>EnchantmentData</code></a> dictionary of all the in-game enchantments. [Auto]</li></ul></li><li><code>mcinstance: Object</code><ul><li>This is the <code>Minecraft</code> instance exposed to JavaScript. It has no wrapping, and so many properties will be illegible. To use it, I would recommend editing the <code>build.gradle</code> in the workspace to set <code>minifying: false;</code> [Auto]</li></ul></li><li><code>version: String</code><ul><li>The version of the EaglerForge.</li></ul></li><li><code>clientBrand: String</code><ul><li>The brand of the Eaglercraft client, taken from <code>ClientBrandRetriever.java</code></li></ul></li></ul><p>It has the following methods:</p><ul><li><code>addEventListener(eventName: String, callback: Function) : void</code><ul><li>Documentation <a href="./events/addEventListener.html">here</a></li></ul></li><li><code>require(componentName: String)</code><ul><li>Documentation <a href="./globals/require.html">here</a></li></ul></li><li><code>displayToChat({msg: String})</code><ul><li>Displays client-side message to user&#39;s ingame chat gui.</li></ul></li><li><code>uwuify({string: String})</code><ul><li>uwuifys your string...</li></ul></li><li><code>clickMouse()</code><ul><li>Triggers a left click ingame.</li></ul></li><li><code>rightClickMouse()</code><ul><li>Triggers a right click ingame.</li></ul></li><li><code>getFPS()</code><ul><li>returns the current fps</li></ul></li><li><code>getdisplayHeight()</code><ul><li>returns screen height</li></ul></li><li><code>getdisplayWidth()</code><ul><li>returns screen width</li></ul></li><li><code>drawStringWithShadow({msg: String, x: Integer, y: Integer, color: Integer})</code><ul><li>draws your string to screen and needs to be ran when the <code>drawhud</code> event is called. the color parameter needs be hex but # is replaced with 0x</li></ul></li><li><code>drawString({msg: String, x: Integer, y: Integer, color: Integer})</code><ul><li>same as drawStringWithShadow but dosnt draw the shadow</li></ul></li><li><code>drawRect({left: Integer, top: Integer, right: Integer, bottom: Integer, color: Integer})</code><ul><li>draws a rect to screen and needs to be ran when the <code>drawhud</code> event is called. the color parameter needs be hex but # is replaced with 0x</li></ul></li><li><code>update()</code><ul><li>Force triggers a Mod API update.</li></ul></li></ul><h3 id="passing-ref-objects" tabindex="-1">Passing &#39;Ref&#39; objects <a class="header-anchor" href="#passing-ref-objects" aria-label="Permalink to &quot;Passing &#39;Ref&#39; objects&quot;">​</a></h3><p>Eg: <code>setCurrentItemOrArmor({slotIn: Integer, itemStack: ItemStackRef}) : void</code> This method&#39;s itemStack parameter uses an &#39;ItemStackRef&#39;. &#39;Refs&#39; are short for &#39;references&#39;, as they are the root reference to a java object, not just a data wrapper. You can get a ref from a Data by using <code>getRef()</code>, as specified <a href="./globals/Data.html">here</a>.</p><h3 id="using-non-auto-properties" tabindex="-1">Using non-auto properties <a class="header-anchor" href="#using-non-auto-properties" aria-label="Permalink to &quot;Using non-auto properties&quot;">​</a></h3><p>In order to use non-auto properties like <code>ModAPI.player</code> or <code>ModAPI.settings</code>, they must be <a href="./globals/require.html">required</a></p><h3 id="triggering-data-updates-reload" tabindex="-1">Triggering data updates (<code>reload()</code>) <a class="header-anchor" href="#triggering-data-updates-reload" aria-label="Permalink to &quot;Triggering data updates (`reload()`)&quot;">​</a></h3><p>To trigger the game to read your updated values, call the <code>reload()</code> method on the object.</p><p>Eg:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ModAPI.player.motionY += 1;</span></span>\n<span class="line"><span>ModAPI.player.reload();</span></span></code></pre></div><p>Frequent calls to <code>reload()</code> may cause lag, so try to limit them.</p><h1 id="logger-api" tabindex="-1">Logger API <a class="header-anchor" href="#logger-api" aria-label="Permalink to &quot;Logger API&quot;">​</a></h1><p>Allows you to access the Log4J library from javascript. you can access it from <code>ModAPI.logger.(method)</code>.</p><p>it has the following methods:</p><ul><li><code>loginfo({string: String})</code></li><li><code>logerror({string: String})</code></li><li><code>logdebug({string: String})</code></li><li><code>logwarn({string: String})</code></li><li><code>logfatal({string: String})</code></li><li><code>logtrace({string: String})</code></li></ul><h1 id="platform-api" tabindex="-1">Platform API <a class="header-anchor" href="#platform-api" aria-label="Permalink to &quot;Platform API&quot;">​</a></h1><p>Allows you to shrimply access EagRuntime from javascript. you can access it from <code>ModAPI.platform.(method)</code>.</p><p>it has the following methods:</p><ul><li><code>isOfflineDownload() : Boolean</code><ul><li>turns true if the client that loaded the mod is an offline download and turns false if the client is a website (using web folder)</li></ul></li><li><code>freeMemory() : Integer</code><ul><li>returns free memory</li></ul></li><li><code>maxMemory() : Integer</code><ul><li>returns max memory</li></ul></li><li><code>totalMemory() : Integer</code><ul><li>returns total memory</li></ul></li><li><code>openLink({url: String})</code><ul><li>opens a link in a new tab</li></ul></li><li><code>getClipboard() : String</code><ul><li>gets the user&#39;s clipboard</li></ul></li><li><code>recSupported() : Boolean</code><ul><li>checks if recording the screen is supported</li></ul></li><li><code>toggleRec() : Void</code><ul><li>toggles the screen recorder</li></ul></li><li><code>getUserAgentString() : Void</code><ul><li>returns the UserAgent</li></ul></li><li><code>getGLRenderer() : Void</code><ul><li>self explanatory</li></ul></li><li><code>getGLVersion() : Void</code><ul><li>returns the GL version</li></ul></li></ul>',23),r=[i];function d(c,n,s,u,g,h){return o(),l("div",null,r)}const f=e(a,[["render",d]]);export{m as __pageData,f as default};
